{"version":3,"sources":["js/component/Select.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Select","props","state","listVisible","showDropdownMenu","bind","hideDropdownMenu","elem","this","handleChange","event","preventDefault","setState","document","addEventListener","removeEventListener","selecText","selected","length","defaultValue","className","onClick","style","display","select","list","map","index","getValue","flag","City","Town","key","React","Component","App","data","citySelected","town","townSeleted","foodData","isLoading","handleCityChange","handleTownChange","updateTxt","updateTown","value","filteredObject","Object","keys","reduce","r","e","includes","values","chkData","val","filter","that","localStorage","getItem","fetch","then","response","json","jsonStr","setItem","JSON","stringify","parse","newCity","self","findIndex","t","newTown","loadingElem","i","src","PicURL","alt","Name","HostWords","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.45948d50.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\ninterface SelectPrpps {\n  list: any[],\n  handleChange: any,\n  defaultValue:string,\n  flag: number,\n  selected:string\n}\n\ninterface SelectState{\n  listVisible: boolean,\n}\n\nclass Select extends React.Component<SelectPrpps, SelectState> {\n  constructor(props:any){\n    super(props);\n\n    this.state = {\n        listVisible: false,\n    };\n\n    this.showDropdownMenu = this.showDropdownMenu.bind(this);\n    this.hideDropdownMenu = this.hideDropdownMenu.bind(this);\n\n  };\n\n  select(elem?:any){\n    this.props.handleChange(elem);\n  }\n\n  showDropdownMenu(event: { preventDefault: () => void; }) {\n    event.preventDefault();\n    this.setState({ listVisible: true }, () => {\n    document.addEventListener('click', this.hideDropdownMenu);\n    });\n  }\n\n  hideDropdownMenu() {\n    this.setState({ listVisible: false }, () => {\n      document.removeEventListener('click', this.hideDropdownMenu);\n    });\n\n  }\n\n  render() {\n    let selecText = this.props.selected.length > 0 ? this.props.selected: this.props.defaultValue;\n    return (\n      <div className={`dropdown-container ${this.state.listVisible ? \"show\" : \"\"}`}>\n        <div className={`dropdown-display ${this.state.listVisible ? \"clicked\": \"\"}`} onClick={this.showDropdownMenu}>\n          <span>{selecText}</span>\n          <i className=\"angle-down\"></i>\n        </div>\n        <div className=\"dropdown-list\" style={{display: `${this.state.listVisible?\"block\":\"none\"}`}}>\n          <ul>\n            <li onClick={this.select.bind(this, null)}>\n              <a><span>{this.props.defaultValue}</span></a>\n            </li>\n            {this.props.list.map((elem:any, index:number)=> {\n              let getValue = this.props.flag === 0 ? elem.City : elem.Town;\n              return (\n                <li key={index} onClick={this.select.bind(this, elem)}>\n                  <a><span>{getValue}</span></a>\n                </li>)\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Select;","/* eslint-disable array-callback-return */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState }from 'react';\nimport './css/App.less';\nimport Select from './js/component/Select';\n\n\ninterface FoodState {\n  data : any[],\n  citySelected: string,\n  town: any[],\n  townSeleted: string,\n  foodData: any[], \n  isLoading: boolean\n}\n\nclass App extends React.Component<{}, FoodState> {\n  constructor(props:any){\n    super(props);\n    this.state = {\n      data: [],\n      citySelected : \"\",\n      town: [],\n      townSeleted: \"\",\n      foodData: [],\n      isLoading: true\n    };\n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.handleTownChange = this.handleTownChange.bind(this);\n  }\n  \n\n  // 選擇行政區域\n  handleCityChange(event: { City: any; }){\n    let updateTxt = event? event.City: \"\";\n    this.setState({\n      citySelected: updateTxt, \n      townSeleted: \"\"\n    });\n    this.updateTown(updateTxt);\n  }\n\n  // 更新鄉鎮區域\n  updateTown(value:string){\n    let data = this.state.data;\n    var filteredObject = Object.keys(data).reduce(function(r:any, e:any) {\n      if (value.includes(data[e].City)) r[e] = data[e]\n      return r;\n    }, {})\n    let town = Object.values(filteredObject);\n    let chkData = town.length === 0 ? data: town;\n    this.setState({\n      town: town,\n      foodData: chkData\n    });\n  }\n\n  // 選擇鄉鎮區域\n  handleTownChange(event: { Town: any; }){\n    let val = event? event.Town: \"\";\n    let town = val.length === 0 ? this.state.citySelected.length === 0 ? this.state.data : this.state.town  : this.state.town.filter((elem: any) => elem.Town === val);\n    this.setState({\n      townSeleted: val, \n      foodData: town\n    });\n  }\n\n  componentDidMount(){\n\n    let that = this;\n\n    if(localStorage.getItem(\"travelFoodList\") === null){\n      const cors = 'https://cors-anywhere.herokuapp.com/'; // use cors-anywhere to fetch api data\n      const url = 'https://data.coa.gov.tw/Service/OpenData/ODwsv/ODwsvTravelFood.aspx'; // origin api url\n      fetch(`${cors}${url}`)\n      .then(response => response.json())\n      .then(function(jsonStr) {\n        that.setState({ \n          data: jsonStr, \n          foodData: jsonStr,\n          isLoading: false\n        });\n        localStorage.setItem(\"travelFoodList\", JSON.stringify(jsonStr));\n      });\n    }else{\n      const jsonStr = localStorage.getItem(\"travelFoodList\") as any;\n      that.setState({ \n        data: JSON.parse(jsonStr), \n        foodData: JSON.parse(jsonStr),\n        isLoading: false\n      });\n    }\n  }\n  render() {\n    let { data, town, foodData, citySelected, townSeleted, isLoading} = this.state;\n    const newCity = data.filter((elem: { City: any; }, index: any, self: any[]) => \n      self.findIndex((t: { City: any; }) => {return t.City === elem.City }) === index);\n\n    const newTown = town.filter((elem: { Town: any; }, index: any, self: any[]) => \n      self.findIndex((t: { Town: any; }) => {return t.Town === elem.Town }) === index);\n\n    let loadingElem = isLoading ? \n      <div className=\"loader-wrap\"><div className=\"loader\"></div></div>:\n      <div className={`items-wrapper`}>\n        {foodData.map((elem: any, i: any)=>\n          <div key={i} className=\"item\">\n            <div className=\"items-mask\"></div>\n            <img src={`${elem.PicURL}`} alt={`${elem.Name}`}/>\n            <div className=\"city\">{elem.City}</div>\n            <div className=\"food-info\">\n              <div className=\"town\">{elem.Town}</div>\n              <div className=\"name\">{elem.Name}</div>\n              <div className=\"hostWords\">\n                <hr/>\n                {elem.HostWords}\n              </div>\n            </div>\n          </div>\n        )}\n      </div> as JSX.Element;\n\n    return (\n      <div id=\"wrapper\">\n        <h1 id=\"title\">農村地方美食小吃特色料理</h1>\n        <div className=\"select-fields\">\n          <fieldset className=\"fields\">\n            <Select list={newCity} handleChange={this.handleCityChange} defaultValue={`請選擇行政區域...`} flag={0} selected={citySelected}/>\n            <Select list={newTown} handleChange={this.handleTownChange} defaultValue={`請選擇鄉鎮區...`} flag={1} selected={townSeleted}/>\n          </fieldset>\n        </div>\n        <div id=\"Container\">\n          <div className=\"items-container\">\n            {loadingElem}\n          </div>\n        </div>\n        <footer>政府資料開放平台<br/>https://data.gov.tw/dataset/6037</footer>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\nserviceWorker.register();\n"],"sourceRoot":""}